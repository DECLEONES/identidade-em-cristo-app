# render.yaml - Render Blueprints (Sintaxe Corrigida)

# Este blueprint define a infraestrutura do seu projeto:
# 1. Um Banco de Dados PostgreSQL (pserv)
# 2. Um Serviço Web (web) para a sua API Node/Express

services:
# 1. SERVIÇO DE BANCO DE DADOS (PSERV)
  - type: pserv
    name: identidade-db-service
    plan: free # Plano de desenvolvimento
    
    # Configuração do Disco (Crucial para Dados Persistentes do DB)
    disk:
      name: jornada-db-disk
      sizeGB: 1

# 2. SERVIÇO WEB (BACKEND NODE/EXPRESS)
  - type: web
    name: identidade-api-service
    rootDir: backend # O código a ser usado está DENTRO da pasta 'backend'
    plan: free
    env: node
    
    # O Render deteta a porta 10000 por padrão, mas vamos forçar a injeção da porta
    # no processo.env para garantir compatibilidade com o server.ts
    
    # Comandos de construção
    buildCommand: |
      npm install
      npx prisma generate
      npm run build
      
    # Comando de inicialização do servidor (usa o JS compilado na pasta dist/)
    startCommand: node dist/server.js
    
    # Variáveis de Ambiente
    envVars:
      # Variável que o Prisma usa para conectar à DB.
      # O Render injeta automaticamente a string de conexão do serviço 'identidade-db-service'
      - key: DATABASE_URL
        fromDatabase:
          name: identidade-db-service
          property: connectionString
      # O URL do seu frontend para o CORS. Será ajustado após o deploy do frontend.
      - key: FRONTEND_URL
        value: "AGUARDANDO_URL_FRONTEND" 
      # Configuração da porta (o Render pode injetar a sua, mas definimos um padrão)
      - key: PORT
        value: 3000

    # Adiciona a pré-migração de banco de dados (CRUCIAL)
    # Roda a migração ANTES de iniciar o servidor web pela primeira vez.
    preDeployCommand: npx prisma migrate deploy
